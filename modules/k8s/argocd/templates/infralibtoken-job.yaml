apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-infralibtoken
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-infralibtoken
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["argocd-initial-admin-secret"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["argocd-infralib-token"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-infralibtoken
subjects:
- kind: ServiceAccount
  name: {{ .Release.Name }}-infralibtoken
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: {{ .Release.Name }}-infralibtoken
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-infralibtoken
  annotations:
    argocd.argoproj.io/sync-wave: "1"
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    kube-score/ignore: pod-networkpolicy
spec:
  activeDeadlineSeconds: 900
  parallelism: 1
  completions: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: {{ .Release.Name }}-infralibtoken
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 90
            preference:
              matchExpressions:
              - key: tools
                operator: In
                values:
                - "true"
      tolerations:
        - key: "tools"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

      containers:
      - name: kubectl
        image: {{ .Values.job.image }}:{{ .Values.job.tag }}
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
            ephemeral-storage: 200Mi
          requests:
            cpu: 1m
            memory: 16Mi
            ephemeral-storage: 2Mi
        env:
        - name: ARGOCD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - /bin/bash
        - -c
        - |
          ARGOCD_AUTH_TOKEN=`kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-infralib-token -o jsonpath="{.data.token}" | base64 -d`
          if [ "$ARGOCD_AUTH_TOKEN" == "" ]
          then
            echo "No infralib ArgoCD token found. Trying to create token using admin credentials."
            ARGO_PASS=`kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d` 
            if [ "$ARGO_PASS" != "" ]
            then
              {{- if and (hasKey .Values "argocd") (hasKey .Values.argocd "configs") (hasKey .Values.argocd.configs "params") (hasKey .Values.argocd.configs.params "server.insecure") (eq (index .Values.argocd.configs.params "server.insecure") true) }}
              AUTH_FLAGS="--plaintext"
              {{- else }}
              AUTH_FLAGS="--insecure"
              {{- end }}
              argocd login --password ${ARGO_PASS} ${AUTH_FLAGS} --username admin {{ .Release.Name }}-server
              if [ $? -ne 0 ]
              then
                echo "Unable to login to ArgoCD with admin user."
                sleep 10
                exit 1
              fi
              ARGOCD_AUTH_TOKEN=`argocd account generate-token --account infralib`
              if [ $? -ne 0 ]
              then
                echo "Unable to generate token for infralib."
                sleep 10
                exit 1
              fi
              argocd logout {{ .Release.Name }}-server
              if [ "$ARGOCD_AUTH_TOKEN" != "" ]
              then
                kubectl create secret -n ${ARGOCD_NAMESPACE} generic argocd-infralib-token --from-literal=token=$ARGOCD_AUTH_TOKEN
                if [ $? -ne 0 ]
                then
                  echo "Failed to store generated infralib token in secret"
                  sleep 10
                  exit 1
                fi
              else
                echo "Failed to create ARGOCD_AUTH_TOKEN. This is normal initially when the ArgoCD ingress hostname is not resolving yet."
              fi
              
            else
              echo "Unable to get argocd Admin token to create the account token for infralib."
              sleep 30
              exit 1
            fi
          fi        
      restartPolicy: Never
  backoffLimit: 7
